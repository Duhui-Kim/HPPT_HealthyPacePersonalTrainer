package com.diet.config;

import java.net.URI;
import java.util.Arrays;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.AutoConfigureOrder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.header.writers.frameoptions.StaticAllowFromStrategy;
import org.springframework.security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy;
import org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter;

import com.diet.service.UserService;

@Configuration
@EnableWebSecurity
public class AuthenticationConfig {
	
	@Autowired
	private UserService userService;
	
	@Value("${jwt.secret}")
	private String secretKey;
	
	@SuppressWarnings("deprecation")
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
	    return httpSecurity
	            .httpBasic().disable()
	            .csrf().disable()
	            .cors().and()
//	            .headers().frameOptions().disable()
	            .and()
	            .authorizeRequests()
	            .antMatchers("/user/login", "/user/join").permitAll() // 로그인 회원가입은 가능하도록
	            .antMatchers(HttpMethod.POST, "/**").authenticated() // 나머진 모두 인증 필요
	            .and()
	            .sessionManagement()
	            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	            .and()
	            .addFilterBefore(new JwtFilter(userService, secretKey), UsernamePasswordAuthenticationFilter.class) // 인증 전에 jwt filter에서 처리
	            .build();
	}		
}
